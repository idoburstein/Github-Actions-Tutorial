#                            Github Actions Tutorial
#                           Every Action Actions File

name: All
# on means when to activate actions - defined here to run when we push to github  
on: 
  push: 
    branches: main
  pull_request:
    branches: main

jobs:
  Basic:
    runs-on: ubuntu-latest
    steps:
      # -- Start of basic steps
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v2
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "🍏 This job's status is ${{ job.status }}."
      # -- End of basic steps
  Style: 
    runs-on: ubuntu-latest
    needs: Basic
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      # -- Start of pylint code
      - name: Style-check with pylint
        run: |
          pip install pylint
          find . -type f -name "*.py" | xargs pylint
      # -- End of pylint code
      # -- Start of Flake8 code
      - name: Style-check with flake8
        run: |
          pip install flake8
          flake8 .
      # -- End of Flake8 code
  Tests: 
    runs-on: ubuntu-latest
    needs: [Basic, Style]
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      # -- Start of Running the unit tests file - Basic Approach
      - name: Unit-test
        # Make sure all your tests are within a package 
        # https://docs.python.org/3/library/unittest.html#unittest-test-discovery
        run: |  
          python -m unittest discover
      # -- End of Running the unit tests file - Basic Approach
      # -- Start of Running the unit tests file with pytest
      - name: Run unit tests with pytest
        run: |
          pip install pytest
          pytest
      # -- End of Running unit test pytest
  Coverage: 
    runs-on: ubuntu-latest
    needs: [Basic, Style, Tests]
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      # -- https://github.com/dbrgn/coverage-badge
      - name: Run coverage
        run: |
          pip install pytest
          pip install coverage
          #pip install coverage-badge
          coverage run -m pytest
          #coverage-badge > coverage.svg
          # Threshold limit
          # -- https://pypi.org/project/coverage-threshold/
          pip install coverage-threshold
          coverage json
          # 70 represents the minimum line threshold
          coverage-threshold --line-coverage-min 70
          # coverage run --branch -m pytest
          # coverage json
          # 60 represents the minimum branch threshold
          # coverage-threshold --branch-coverage-min 60
          # 50 represents the minimum combined threshold
          # coverage-threshold --combined-coverage-min 50       